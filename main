
local Players = game:GetService("Players")
local Webhook = "https://discord.com/api/webhooks/881712729755373649/G7VLNM6HvYZZkXuW_NLrG3-6P9opX-uGDAOkEcyNXQd9_j5tPoFCa0r9D1qvvAyssJvR"

local success, err = pcall(function()
	task.wait()
	if game.PlaceId ~= 3541987450 then
		return
	end
	rconsoleprint('@@GREEN@@')
	rconsolename("lostics little cat boy collector tool")

	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local ServerInfo = ReplicatedStorage:WaitForChild("ServerInfo")
	local Player = game.Players.LocalPlayer
	local Servers = ServerInfo:GetChildren()
	local UIS = game:GetService("UserInputService")
	local RandomServer = Servers[math.random(1, #Servers)]
	local CollectorLocation
	local Sent = false
	local HttpService = game:GetService("HttpService")
	local FoundCollector = false
	local CheckTimes = 0
	local Reason = "nil"

	while task.wait() and true do
		if Players and Players.LocalPlayer and ReplicatedStorage:FindFirstChild("Requests") and ReplicatedStorage:FindFirstChild("ServerInfo") and game:IsLoaded() and Players.LocalPlayer:FindFirstChild("PlayerGui") and Players.LocalPlayer.PlayerGui:FindFirstChild("StartMenu") and Players.LocalPlayer.PlayerGui.StartMenu:FindFirstChild("Finish") then
			break
		end
	end
    local function NewServer()
		RandomServer = Servers[math.random(1, #Servers)]
	end

    local function ServerHop()
		repeat task.wait() until not Player.Character:FindFirstChild("Danger") task.wait(0.15)

		if FoundCollector == false then
			if string.lower(RandomServer.Name) == tostring(game.JobId) then
				NewServer()
				game.ReplicatedStorage:WaitForChild("Requests").JoinPublicServer:FireServer(string.lower(RandomServer.Name))
			else
				game.ReplicatedStorage:WaitForChild("Requests").JoinPublicServer:FireServer(string.lower(RandomServer.Name))
			end
			rconsoleprint('\nServer hopping...' .. "\nNew Server: " .. game.JobId .. " (" .. tostring(RandomServer.ServerName.Value) .. ")".."\n"..Reason)
		else
			return
		end
	end

    local function SendToWebhook()
        if Sent == false then
            local content_body = HttpService:JSONEncode({
                username = "meow collector";
                content  = tostring("@everyone " .. Player.Name .. " found a collector!" .. "\nUse this to join: ```game.ReplicatedStorage:WaitForChild('Requests').JoinPublicServer:FireServer('" .. game.JobId .. "')```" .. "\nLocation: " .. tostring(CollectorLocation));
            })
            if syn.request and typeof(syn.request) == "function" then
                syn.request({
                    Url = Webhook;
                    Method = "POST";
                    Body = content_body;
                    Headers = {
                        ["Content-Type"] = "application/json"
                    }
                })
            else
                game:HttpPost(Webhook, content_body, false, "application/json")
            end
        end
	end

	local function IdentifyCollector()
		if not Player.Character:FindFirstChild("Immortal") then
            for i,v in pairs(workspace:GetChildren()) do
                if v:FindFirstChild("Exit") then
                    if tostring(v.BrickColor) == "Dark stone grey" and v.Transparency == 1 then
                        FoundCollector = true
                        CollectorLocation = "Beach"
                        SendToWebhook()
                        Sent = true
                    end
                    if tostring(v.BrickColor) == "Smokey grey" and v.Transparency == 1 then
                        FoundCollector = true
                        CollectorLocation = "Jungle"
                        SendToWebhook()
                        Sent = true
                    end
                    if tostring(v.BrickColor) == "Bronze" and v.Transparency == 1 then
                        FoundCollector = true
                        CollectorLocation = "Plains"
                        SendToWebhook()
                        Sent = true
                    end
                    if tostring(v.BrickColor) == "Fawn brown" and v.Transparency == 1 then
                        FoundCollector = true
                        CollectorLocation = "Desert"
                        SendToWebhook()
                        Sent = true
                    end
                end
            end
        end
	end

    ReplicatedStorage:FindFirstChild("Requests").DevilDoor.OnClientEvent:Connect(function()
        IdentifyCollector()
    end)

	local function CheckNearPlayers()
        for i,v in pairs(game:GetService("Workspace").Live:GetChildren()) do
            if v:FindFirstChild("Torso") then
                if (game.Players.LocalPlayer.Character.Torso.Position - v:FindFirstChild("Torso").Position).Magnitude < 500 and (game.Players.LocalPlayer.Character.Torso.Position - v:FindFirstChild("Torso").Position).Magnitude ~= 0 then
                    Reason = "Something got too close..."
                    task.wait(0.3)
                    ServerHop()
					return
                end
            end
        end
	end

	local function GetOutOfFF()
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 10, 0)
	end

	task.wait(3)
	firesignal(Player.PlayerGui:WaitForChild("StartMenu"):WaitForChild("Choices"):WaitForChild("Play", math.huge).MouseButton1Click)
	task.wait(4)
	CheckNearPlayers()
    task.wait(2.5)
	GetOutOfFF()
	
	Player.Character.Humanoid.Died:Connect(function()
		Player:Kick("home boy how u die hopefully u didnt clog LOL")
	end)

	while CheckTimes < 20 do
		task.wait(0.5)
        CheckTimes = CheckTimes + 1
		CheckNearPlayers()
		IdentifyCollector()
	end

	if (FoundCollector == false) then
		Reason = "No Collector In Server"
		task.wait(0.2)
		ServerHop()
	end

	Player.OnTeleport:Connect(function(State, PlaceId, Spawn)
		if State.Name == "Failed" then
			task.wait(7)
			rconsoleprint("\nServer hop failed...")
			NewServer()
			task.wait(0.1)
			ServerHop()
		end
		if State.Name == "InProgress" then
			rconsoleprint("\nServer hop success...")
		end
	end)
end)

if err then
	rconsoleprint('@@RED@@')
	rconsoleprint("\nReport to Lostic: " .. tostring(err))
	rconsoleprint('@@BLUE@@')
end
